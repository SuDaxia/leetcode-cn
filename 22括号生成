#https://leetcode-cn.com/problems/generate-parentheses/submissions/
#python 2.x
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        ans=[]
        def backtrace(s,left,right):
            if len(s)==2*n:
                return ans.append("".join(s))
            if left<n:
                s.append("(")
                backtrace(s,left+1,right)
                s.pop()
            if right<left:
                s.append(")")
                backtrace(s,left,right+1)
                s.pop()
        backtrace([],0,0)
        return ans

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        #a(a) a can be null or a(a)
        if n == 0:
            return ['']
        ans = []
        for c in range(n):
            for left in self.generateParenthesis(c):
                for right in self.generateParenthesis(n-1-c):
                    ans.append('({}){}'.format(left, right))
        return ans
